import logging
import os
import asyncio
from telegram import Update
from telegram.constants import ChatAction
from telegram.ext import ApplicationBuilder, ContextTypes, CommandHandler, MessageHandler, filters
from openai import OpenAI
from dotenv import load_dotenv

# –ó–∞–≥—Ä—É–∂–∞–µ–º —Ç–æ–∫–µ–Ω—ã –∏–∑ .env
load_dotenv()
TELEGRAM_TOKEN = os.getenv("TELEGRAM_TOKEN", "").strip()
OPENAI_API_KEY = os.getenv("OPENAI_API_KEY", "").strip()

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –∫–ª–∏–µ–Ω—Ç–∞ OpenAI
client = OpenAI(api_key=OPENAI_API_KEY)

# –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ
logging.basicConfig(format="%(asctime)s - %(levelname)s - %(message)s", level=logging.INFO)
logger = logging.getLogger(__name__)

# –ö–æ–º–∞–Ω–¥–∞ /start
async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    context.user_data["history"] = []  # –æ—á–∏—â–∞–µ–º –ø–∞–º—è—Ç—å –ø—Ä–∏ —Å—Ç–∞—Ä—Ç–µ
    await update.message.reply_text("üëã –ü—Ä–∏–≤–µ—Ç! –Ø ChatGPT-–±–æ—Ç. –ü–∏—à–∏ —á—Ç–æ —É–≥–æ–¥–Ω–æ ‚Äî —è –∑–∞–ø–æ–º–Ω—é –∫–æ–Ω—Ç–µ–∫—Å—Ç —Ä–∞–∑–≥–æ–≤–æ—Ä–∞!")

# –û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –æ—Ç–≤–µ—Ç–∞
async def chatgpt_handler(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_message = update.message.text.strip()
    user_id = update.message.from_user.id
    logger.info(f"–°–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç {user_id}: {user_message}")

    # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –∏—Å—Ç–æ—Ä–∏—é –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è, –µ—Å–ª–∏ –µ—ë –µ—â—ë –Ω–µ—Ç
    if "history" not in context.user_data:
        context.user_data["history"] = []

    # –î–æ–±–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ –∏—Å—Ç–æ—Ä–∏—é
    context.user_data["history"].append({"role": "user", "content": user_message})

    try:
        # –û—Ç–æ–±—Ä–∞–∂–∞–µ–º, —á—Ç–æ –±–æ—Ç ‚Äú–ø–µ—á–∞—Ç–∞–µ—Ç‚Äù
        await update.message.chat.send_action(action=ChatAction.TYPING)

        # –ó–∞–ø—Ä–∞—à–∏–≤–∞–µ–º –æ—Ç–≤–µ—Ç –æ—Ç ChatGPT
        response = client.chat.completions.create(
            model="gpt-4o-mini",
            messages=[
                {"role": "system", "content": "–¢—ã –¥—Ä—É–∂–µ–ª—é–±–Ω—ã–π Telegram-–±–æ—Ç-–ø–æ–º–æ—â–Ω–∏–∫. –ü–∏—à–∏ –µ—Å—Ç–µ—Å—Ç–≤–µ–Ω–Ω–æ –∏ —Å —ç–º–æ—Ü–∏—è–º–∏."},
                *context.user_data["history"],
            ],
            max_tokens=400,
        )

        bot_reply = response.choices[0].message.content.strip()
        logger.info(f"–û—Ç–≤–µ—Ç –±–æ—Ç–∞: {bot_reply}")

        # –î–æ–±–∞–≤–ª—è–µ–º –æ—Ç–≤–µ—Ç –±–æ—Ç–∞ –≤ –∏—Å—Ç–æ—Ä–∏—é
        context.user_data["history"].append({"role": "assistant", "content": bot_reply})

        # –ò–º–∏—Ç–∞—Ü–∏—è ‚Äú–∂–∏–≤–æ–≥–æ‚Äù –æ—Ç–≤–µ—Ç–∞ (–ø–µ—á–∞—Ç–∞–µ—Ç –ø–æ —á–∞—Å—Ç—è–º)
        await send_typing_reply(update, bot_reply)

    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞—â–µ–Ω–∏–∏ –∫ OpenAI: {e}", exc_info=True)
        await update.message.reply_text("‚ö†Ô∏è –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞—â–µ–Ω–∏–∏ –∫ ChatGPT.")

# –§—É–Ω–∫—Ü–∏—è –∏–º–∏—Ç–∞—Ü–∏–∏ ‚Äú–∂–∏–≤–æ–≥–æ‚Äù –Ω–∞–±–æ—Ä–∞ —Ç–µ–∫—Å—Ç–∞
async def send_typing_reply(update: Update, text: str, delay_per_chunk: float = 0.5):
    chunks = []
    words = text.split()

    # –†–∞–∑–±–∏–≤–∞–µ–º –¥–ª–∏–Ω–Ω—ã–π –æ—Ç–≤–µ—Ç –Ω–∞ —á–∞—Å—Ç–∏ –ø–æ ~30 —Å–ª–æ–≤
    chunk = []
    for word in words:
        chunk.append(word)
        if len(chunk) >= 30:
            chunks.append(" ".join(chunk))
            chunk = []
    if chunk:
        chunks.append(" ".join(chunk))

    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —á–∞—Å—Ç–∏ —Å –∏–º–∏—Ç–∞—Ü–∏–µ–π ‚Äú–Ω–∞–±–æ—Ä–∞‚Äù
    for i, part in enumerate(chunks):
        if i == 0:
            await update.message.reply_text(part)
        else:
            await update.message.chat.send_action(ChatAction.TYPING)
            await asyncio.sleep(delay_per_chunk)
            await update.message.reply_text(part)

# –û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –∑–∞–ø—É—Å–∫–∞ –±–æ—Ç–∞
def main():
    logger.info("üöÄ –ó–∞–ø—É—Å–∫ Telegram-–±–æ—Ç–∞...")
    app = ApplicationBuilder().token(TELEGRAM_TOKEN).build()

    app.add_handler(CommandHandler("start", start))
    app.add_handler(MessageHandler(filters.TEXT & (~filters.COMMAND), chatgpt_handler))

    logger.info("‚úÖ –ë–æ—Ç –≥–æ—Ç–æ–≤ –∫ –ø—Ä–∏—ë–º—É —Å–æ–æ–±—â–µ–Ω–∏–π.")
    app.run_polling()

if __name__ == "__main__":
    main()

